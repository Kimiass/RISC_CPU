$date
	Tue Jul 09 18:35:26 2024
$end
$version
	ModelSim Version 2020.4
$end
$timescale
	1ns
$end

$scope module TestAdd $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 1 # read $end
$var wire 1 $ write $end
$var wire 1 % memoryIn [7] $end
$var wire 1 & memoryIn [6] $end
$var wire 1 ' memoryIn [5] $end
$var wire 1 ( memoryIn [4] $end
$var wire 1 ) memoryIn [3] $end
$var wire 1 * memoryIn [2] $end
$var wire 1 + memoryIn [1] $end
$var wire 1 , memoryIn [0] $end
$var wire 1 - memoryOut [7] $end
$var wire 1 . memoryOut [6] $end
$var wire 1 / memoryOut [5] $end
$var wire 1 0 memoryOut [4] $end
$var wire 1 1 memoryOut [3] $end
$var wire 1 2 memoryOut [2] $end
$var wire 1 3 memoryOut [1] $end
$var wire 1 4 memoryOut [0] $end
$var wire 1 5 address [3] $end
$var wire 1 6 address [2] $end
$var wire 1 7 address [1] $end
$var wire 1 8 address [0] $end

$scope module OurCPU $end
$var wire 1 9 clk $end
$var wire 1 : reset $end
$var wire 1 - memoryOut [7] $end
$var wire 1 . memoryOut [6] $end
$var wire 1 / memoryOut [5] $end
$var wire 1 0 memoryOut [4] $end
$var wire 1 1 memoryOut [3] $end
$var wire 1 2 memoryOut [2] $end
$var wire 1 3 memoryOut [1] $end
$var wire 1 4 memoryOut [0] $end
$var wire 1 5 address [3] $end
$var wire 1 6 address [2] $end
$var wire 1 7 address [1] $end
$var wire 1 8 address [0] $end
$var wire 1 % memoryIn [7] $end
$var wire 1 & memoryIn [6] $end
$var wire 1 ' memoryIn [5] $end
$var wire 1 ( memoryIn [4] $end
$var wire 1 ) memoryIn [3] $end
$var wire 1 * memoryIn [2] $end
$var wire 1 + memoryIn [1] $end
$var wire 1 , memoryIn [0] $end
$var wire 1 # read $end
$var wire 1 $ write $end
$var wire 1 ; bus [7] $end
$var wire 1 < bus [6] $end
$var wire 1 = bus [5] $end
$var wire 1 > bus [4] $end
$var wire 1 ? bus [3] $end
$var wire 1 @ bus [2] $end
$var wire 1 A bus [1] $end
$var wire 1 B bus [0] $end
$var wire 1 C alu [7] $end
$var wire 1 D alu [6] $end
$var wire 1 E alu [5] $end
$var wire 1 F alu [4] $end
$var wire 1 G alu [3] $end
$var wire 1 H alu [2] $end
$var wire 1 I alu [1] $end
$var wire 1 J alu [0] $end
$var wire 1 K DR [7] $end
$var wire 1 L DR [6] $end
$var wire 1 M DR [5] $end
$var wire 1 N DR [4] $end
$var wire 1 O DR [3] $end
$var wire 1 P DR [2] $end
$var wire 1 Q DR [1] $end
$var wire 1 R DR [0] $end
$var wire 1 S AC [7] $end
$var wire 1 T AC [6] $end
$var wire 1 U AC [5] $end
$var wire 1 V AC [4] $end
$var wire 1 W AC [3] $end
$var wire 1 X AC [2] $end
$var wire 1 Y AC [1] $end
$var wire 1 Z AC [0] $end
$var wire 1 [ IR [7] $end
$var wire 1 \ IR [6] $end
$var wire 1 ] IR [5] $end
$var wire 1 ^ IR [4] $end
$var wire 1 _ IR [3] $end
$var wire 1 ` IR [2] $end
$var wire 1 a IR [1] $end
$var wire 1 b IR [0] $end
$var wire 1 c AR [3] $end
$var wire 1 d AR [2] $end
$var wire 1 e AR [1] $end
$var wire 1 f AR [0] $end
$var wire 1 g PC [3] $end
$var wire 1 h PC [2] $end
$var wire 1 i PC [1] $end
$var wire 1 j PC [0] $end
$var wire 1 k E $end
$var wire 1 l loadIR $end
$var wire 1 m incIR $end
$var wire 1 n clearIR $end
$var wire 1 o loadDR $end
$var wire 1 p incDR $end
$var wire 1 q clearDR $end
$var wire 1 r loadPC $end
$var wire 1 s incPC $end
$var wire 1 t clearPC $end
$var wire 1 u loadAR $end
$var wire 1 v incAR $end
$var wire 1 w clearAR $end
$var wire 1 x loadAC $end
$var wire 1 y incAC $end
$var wire 1 z clearAC $end
$var wire 1 { T [7] $end
$var wire 1 | T [6] $end
$var wire 1 } T [5] $end
$var wire 1 ~ T [4] $end
$var wire 1 !! T [3] $end
$var wire 1 "! T [2] $end
$var wire 1 #! T [1] $end
$var wire 1 $! T [0] $end
$var wire 1 %! D [7] $end
$var wire 1 &! D [6] $end
$var wire 1 '! D [5] $end
$var wire 1 (! D [4] $end
$var wire 1 )! D [3] $end
$var wire 1 *! D [2] $end
$var wire 1 +! D [1] $end
$var wire 1 ,! D [0] $end
$var wire 1 -! busSelectors [2] $end
$var wire 1 .! busSelectors [1] $end
$var wire 1 /! busSelectors [0] $end
$var wire 1 0! aluOpcode [2] $end
$var wire 1 1! aluOpcode [1] $end
$var wire 1 2! aluOpcode [0] $end
$var wire 1 3! sc [2] $end
$var wire 1 4! sc [1] $end
$var wire 1 5! sc [0] $end
$var wire 1 6! clearSC $end
$var wire 1 7! busIR $end
$var wire 1 8! busDR $end
$var wire 1 9! busPC $end
$var wire 1 :! busAR $end
$var wire 1 ;! busAC $end
$var wire 1 <! busMem $end
$var wire 1 =! opADD $end
$var wire 1 >! opASHL $end
$var wire 1 ?! opXNOR $end
$var wire 1 @! opDIV2 $end
$var wire 1 A! opLOAD $end
$var wire 1 B! opSTORE $end
$var wire 1 C! opCOMP $end
$var wire 1 D! opROUND $end
$var wire 1 E! I $end
$var wire 1 F! PS $end
$var wire 1 G! aluOPCODE $end
$var wire 1 H! incAr $end

$scope module BusSelect $end
$var wire 1 # in [7] $end
$var wire 1 I! in [6] $end
$var wire 1 7! in [5] $end
$var wire 1 ;! in [4] $end
$var wire 1 8! in [3] $end
$var wire 1 9! in [2] $end
$var wire 1 :! in [1] $end
$var wire 1 J! in [0] $end
$var wire 1 -! out [2] $end
$var wire 1 .! out [1] $end
$var wire 1 /! out [0] $end
$upscope $end

$scope module encodeOpcode $end
$var wire 1 D! in [7] $end
$var wire 1 C! in [6] $end
$var wire 1 B! in [5] $end
$var wire 1 A! in [4] $end
$var wire 1 @! in [3] $end
$var wire 1 ?! in [2] $end
$var wire 1 >! in [1] $end
$var wire 1 =! in [0] $end
$var wire 1 0! out [2] $end
$var wire 1 1! out [1] $end
$var wire 1 2! out [0] $end
$upscope $end

$scope module busRoad $end
$var wire 1 ; out [7] $end
$var wire 1 < out [6] $end
$var wire 1 = out [5] $end
$var wire 1 > out [4] $end
$var wire 1 ? out [3] $end
$var wire 1 @ out [2] $end
$var wire 1 A out [1] $end
$var wire 1 B out [0] $end
$var wire 1 K! in0 [7] $end
$var wire 1 L! in0 [6] $end
$var wire 1 M! in0 [5] $end
$var wire 1 N! in0 [4] $end
$var wire 1 O! in0 [3] $end
$var wire 1 P! in0 [2] $end
$var wire 1 Q! in0 [1] $end
$var wire 1 R! in0 [0] $end
$var wire 1 S! in1 [7] $end
$var wire 1 T! in1 [6] $end
$var wire 1 U! in1 [5] $end
$var wire 1 V! in1 [4] $end
$var wire 1 c in1 [3] $end
$var wire 1 d in1 [2] $end
$var wire 1 e in1 [1] $end
$var wire 1 f in1 [0] $end
$var wire 1 W! in2 [7] $end
$var wire 1 X! in2 [6] $end
$var wire 1 Y! in2 [5] $end
$var wire 1 Z! in2 [4] $end
$var wire 1 [! in2 [3] $end
$var wire 1 \! in2 [2] $end
$var wire 1 ]! in2 [1] $end
$var wire 1 F! in2 [0] $end
$var wire 1 K in3 [7] $end
$var wire 1 L in3 [6] $end
$var wire 1 M in3 [5] $end
$var wire 1 N in3 [4] $end
$var wire 1 O in3 [3] $end
$var wire 1 P in3 [2] $end
$var wire 1 Q in3 [1] $end
$var wire 1 R in3 [0] $end
$var wire 1 S in4 [7] $end
$var wire 1 T in4 [6] $end
$var wire 1 U in4 [5] $end
$var wire 1 V in4 [4] $end
$var wire 1 W in4 [3] $end
$var wire 1 X in4 [2] $end
$var wire 1 Y in4 [1] $end
$var wire 1 Z in4 [0] $end
$var wire 1 [ in5 [7] $end
$var wire 1 \ in5 [6] $end
$var wire 1 ] in5 [5] $end
$var wire 1 ^ in5 [4] $end
$var wire 1 _ in5 [3] $end
$var wire 1 ` in5 [2] $end
$var wire 1 a in5 [1] $end
$var wire 1 b in5 [0] $end
$var wire 1 ^! in6 [7] $end
$var wire 1 _! in6 [6] $end
$var wire 1 `! in6 [5] $end
$var wire 1 a! in6 [4] $end
$var wire 1 b! in6 [3] $end
$var wire 1 c! in6 [2] $end
$var wire 1 d! in6 [1] $end
$var wire 1 e! in6 [0] $end
$var wire 1 - in7 [7] $end
$var wire 1 . in7 [6] $end
$var wire 1 / in7 [5] $end
$var wire 1 0 in7 [4] $end
$var wire 1 1 in7 [3] $end
$var wire 1 2 in7 [2] $end
$var wire 1 3 in7 [1] $end
$var wire 1 4 in7 [0] $end
$var wire 1 -! selectors [2] $end
$var wire 1 .! selectors [1] $end
$var wire 1 /! selectors [0] $end
$var wire 1 f! BusOut [7] $end
$var wire 1 g! BusOut [6] $end
$var wire 1 h! BusOut [5] $end
$var wire 1 i! BusOut [4] $end
$var wire 1 j! BusOut [3] $end
$var wire 1 k! BusOut [2] $end
$var wire 1 l! BusOut [1] $end
$var wire 1 m! BusOut [0] $end

$scope module BUSMUX $end
$var reg 8 n! out [7:0] $end
$var wire 1 K! in0 [7] $end
$var wire 1 L! in0 [6] $end
$var wire 1 M! in0 [5] $end
$var wire 1 N! in0 [4] $end
$var wire 1 O! in0 [3] $end
$var wire 1 P! in0 [2] $end
$var wire 1 Q! in0 [1] $end
$var wire 1 R! in0 [0] $end
$var wire 1 S! in1 [7] $end
$var wire 1 T! in1 [6] $end
$var wire 1 U! in1 [5] $end
$var wire 1 V! in1 [4] $end
$var wire 1 c in1 [3] $end
$var wire 1 d in1 [2] $end
$var wire 1 e in1 [1] $end
$var wire 1 f in1 [0] $end
$var wire 1 W! in2 [7] $end
$var wire 1 X! in2 [6] $end
$var wire 1 Y! in2 [5] $end
$var wire 1 Z! in2 [4] $end
$var wire 1 [! in2 [3] $end
$var wire 1 \! in2 [2] $end
$var wire 1 ]! in2 [1] $end
$var wire 1 F! in2 [0] $end
$var wire 1 K in3 [7] $end
$var wire 1 L in3 [6] $end
$var wire 1 M in3 [5] $end
$var wire 1 N in3 [4] $end
$var wire 1 O in3 [3] $end
$var wire 1 P in3 [2] $end
$var wire 1 Q in3 [1] $end
$var wire 1 R in3 [0] $end
$var wire 1 S in4 [7] $end
$var wire 1 T in4 [6] $end
$var wire 1 U in4 [5] $end
$var wire 1 V in4 [4] $end
$var wire 1 W in4 [3] $end
$var wire 1 X in4 [2] $end
$var wire 1 Y in4 [1] $end
$var wire 1 Z in4 [0] $end
$var wire 1 [ in5 [7] $end
$var wire 1 \ in5 [6] $end
$var wire 1 ] in5 [5] $end
$var wire 1 ^ in5 [4] $end
$var wire 1 _ in5 [3] $end
$var wire 1 ` in5 [2] $end
$var wire 1 a in5 [1] $end
$var wire 1 b in5 [0] $end
$var wire 1 ^! in6 [7] $end
$var wire 1 _! in6 [6] $end
$var wire 1 `! in6 [5] $end
$var wire 1 a! in6 [4] $end
$var wire 1 b! in6 [3] $end
$var wire 1 c! in6 [2] $end
$var wire 1 d! in6 [1] $end
$var wire 1 e! in6 [0] $end
$var wire 1 - in7 [7] $end
$var wire 1 . in7 [6] $end
$var wire 1 / in7 [5] $end
$var wire 1 0 in7 [4] $end
$var wire 1 1 in7 [3] $end
$var wire 1 2 in7 [2] $end
$var wire 1 3 in7 [1] $end
$var wire 1 4 in7 [0] $end
$var wire 1 -! selectors [2] $end
$var wire 1 .! selectors [1] $end
$var wire 1 /! selectors [0] $end
$upscope $end
$upscope $end

$scope module aluUnit $end
$var wire 1 C result [7] $end
$var wire 1 D result [6] $end
$var wire 1 E result [5] $end
$var wire 1 F result [4] $end
$var wire 1 G result [3] $end
$var wire 1 H result [2] $end
$var wire 1 I result [1] $end
$var wire 1 J result [0] $end
$var wire 1 k E $end
$var wire 1 9 clk $end
$var wire 1 S AC [7] $end
$var wire 1 T AC [6] $end
$var wire 1 U AC [5] $end
$var wire 1 V AC [4] $end
$var wire 1 W AC [3] $end
$var wire 1 X AC [2] $end
$var wire 1 Y AC [1] $end
$var wire 1 Z AC [0] $end
$var wire 1 K DR [7] $end
$var wire 1 L DR [6] $end
$var wire 1 M DR [5] $end
$var wire 1 N DR [4] $end
$var wire 1 O DR [3] $end
$var wire 1 P DR [2] $end
$var wire 1 Q DR [1] $end
$var wire 1 R DR [0] $end
$var wire 1 o! selectors [2] $end
$var wire 1 p! selectors [1] $end
$var wire 1 G! selectors [0] $end
$var wire 1 q! add [7] $end
$var wire 1 r! add [6] $end
$var wire 1 s! add [5] $end
$var wire 1 t! add [4] $end
$var wire 1 u! add [3] $end
$var wire 1 v! add [2] $end
$var wire 1 w! add [1] $end
$var wire 1 x! add [0] $end
$var wire 1 y! ashl [7] $end
$var wire 1 z! ashl [6] $end
$var wire 1 {! ashl [5] $end
$var wire 1 |! ashl [4] $end
$var wire 1 }! ashl [3] $end
$var wire 1 ~! ashl [2] $end
$var wire 1 !" ashl [1] $end
$var wire 1 "" ashl [0] $end
$var wire 1 #" xNor [7] $end
$var wire 1 $" xNor [6] $end
$var wire 1 %" xNor [5] $end
$var wire 1 &" xNor [4] $end
$var wire 1 '" xNor [3] $end
$var wire 1 (" xNor [2] $end
$var wire 1 )" xNor [1] $end
$var wire 1 *" xNor [0] $end
$var wire 1 +" div [7] $end
$var wire 1 ," div [6] $end
$var wire 1 -" div [5] $end
$var wire 1 ." div [4] $end
$var wire 1 /" div [3] $end
$var wire 1 0" div [2] $end
$var wire 1 1" div [1] $end
$var wire 1 2" div [0] $end
$var wire 1 3" complement [7] $end
$var wire 1 4" complement [6] $end
$var wire 1 5" complement [5] $end
$var wire 1 6" complement [4] $end
$var wire 1 7" complement [3] $end
$var wire 1 8" complement [2] $end
$var wire 1 9" complement [1] $end
$var wire 1 :" complement [0] $end
$var wire 1 ;" addCout $end
$var wire 1 <" ashlCout $end
$var wire 1 =" divCout $end
$var wire 1 >" load $end

$scope module ALUadd $end
$var wire 1 q! result [7] $end
$var wire 1 r! result [6] $end
$var wire 1 s! result [5] $end
$var wire 1 t! result [4] $end
$var wire 1 u! result [3] $end
$var wire 1 v! result [2] $end
$var wire 1 w! result [1] $end
$var wire 1 x! result [0] $end
$var wire 1 ;" Cout $end
$var wire 1 S AC [7] $end
$var wire 1 T AC [6] $end
$var wire 1 U AC [5] $end
$var wire 1 V AC [4] $end
$var wire 1 W AC [3] $end
$var wire 1 X AC [2] $end
$var wire 1 Y AC [1] $end
$var wire 1 Z AC [0] $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end

$scope module ALUashl $end
$var wire 1 y! result [7] $end
$var wire 1 z! result [6] $end
$var wire 1 {! result [5] $end
$var wire 1 |! result [4] $end
$var wire 1 }! result [3] $end
$var wire 1 ~! result [2] $end
$var wire 1 !" result [1] $end
$var wire 1 "" result [0] $end
$var wire 1 <" Cout $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end

$scope module ALUxnor $end
$var wire 1 #" result [7] $end
$var wire 1 $" result [6] $end
$var wire 1 %" result [5] $end
$var wire 1 &" result [4] $end
$var wire 1 '" result [3] $end
$var wire 1 (" result [2] $end
$var wire 1 )" result [1] $end
$var wire 1 *" result [0] $end
$var wire 1 S AC [7] $end
$var wire 1 T AC [6] $end
$var wire 1 U AC [5] $end
$var wire 1 V AC [4] $end
$var wire 1 W AC [3] $end
$var wire 1 X AC [2] $end
$var wire 1 Y AC [1] $end
$var wire 1 Z AC [0] $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end

$scope module ALUdiv $end
$var wire 1 +" result [7] $end
$var wire 1 ," result [6] $end
$var wire 1 -" result [5] $end
$var wire 1 ." result [4] $end
$var wire 1 /" result [3] $end
$var wire 1 0" result [2] $end
$var wire 1 1" result [1] $end
$var wire 1 2" result [0] $end
$var wire 1 =" Cout $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end

$scope module ALUload $end
$var wire 1 ?" AC [7] $end
$var wire 1 @" AC [6] $end
$var wire 1 A" AC [5] $end
$var wire 1 B" AC [4] $end
$var wire 1 C" AC [3] $end
$var wire 1 D" AC [2] $end
$var wire 1 E" AC [1] $end
$var wire 1 >" AC [0] $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end

$scope module ALUcompelement $end
$var wire 1 3" result [7] $end
$var wire 1 4" result [6] $end
$var wire 1 5" result [5] $end
$var wire 1 6" result [4] $end
$var wire 1 7" result [3] $end
$var wire 1 8" result [2] $end
$var wire 1 9" result [1] $end
$var wire 1 :" result [0] $end
$var wire 1 K Memory [7] $end
$var wire 1 L Memory [6] $end
$var wire 1 M Memory [5] $end
$var wire 1 N Memory [4] $end
$var wire 1 O Memory [3] $end
$var wire 1 P Memory [2] $end
$var wire 1 Q Memory [1] $end
$var wire 1 R Memory [0] $end
$upscope $end
$upscope $end

$scope module sCounter $end
$var reg 3 F" number [2:0] $end
$var wire 1 : reset $end
$var wire 1 9 clk $end
$var wire 1 G" inc $end
$upscope $end

$scope module InstructionDecoder $end
$var reg 8 H" out [7:0] $end
$var wire 1 \ in [2] $end
$var wire 1 ] in [1] $end
$var wire 1 ^ in [0] $end
$upscope $end

$scope module ScDecoder $end
$var reg 8 I" out [7:0] $end
$var wire 1 3! in [2] $end
$var wire 1 4! in [1] $end
$var wire 1 5! in [0] $end
$upscope $end

$scope module regPC $end
$var reg 4 J" regOutput [3:0] $end
$var wire 1 9 clk $end
$var wire 1 r load $end
$var wire 1 s inc $end
$var wire 1 t clear $end
$var wire 1 ? regInput [3] $end
$var wire 1 @ regInput [2] $end
$var wire 1 A regInput [1] $end
$var wire 1 B regInput [0] $end
$upscope $end

$scope module regAR $end
$var reg 4 K" regOutput [3:0] $end
$var wire 1 9 clk $end
$var wire 1 u load $end
$var wire 1 H! inc $end
$var wire 1 w clear $end
$var wire 1 ? regInput [3] $end
$var wire 1 @ regInput [2] $end
$var wire 1 A regInput [1] $end
$var wire 1 B regInput [0] $end
$upscope $end

$scope module regDR $end
$var reg 8 L" regOutput [7:0] $end
$var wire 1 9 clk $end
$var wire 1 o load $end
$var wire 1 p inc $end
$var wire 1 q clear $end
$var wire 1 ; regInput [7] $end
$var wire 1 < regInput [6] $end
$var wire 1 = regInput [5] $end
$var wire 1 > regInput [4] $end
$var wire 1 ? regInput [3] $end
$var wire 1 @ regInput [2] $end
$var wire 1 A regInput [1] $end
$var wire 1 B regInput [0] $end
$upscope $end

$scope module regAC $end
$var reg 8 M" regOutput [7:0] $end
$var wire 1 9 clk $end
$var wire 1 x load $end
$var wire 1 y inc $end
$var wire 1 z clear $end
$var wire 1 ; regInput [7] $end
$var wire 1 < regInput [6] $end
$var wire 1 = regInput [5] $end
$var wire 1 > regInput [4] $end
$var wire 1 ? regInput [3] $end
$var wire 1 @ regInput [2] $end
$var wire 1 A regInput [1] $end
$var wire 1 B regInput [0] $end
$upscope $end

$scope module regIR $end
$var reg 8 N" regOutput [7:0] $end
$var wire 1 9 clk $end
$var wire 1 l load $end
$var wire 1 m inc $end
$var wire 1 n clear $end
$var wire 1 ; regInput [7] $end
$var wire 1 < regInput [6] $end
$var wire 1 = regInput [5] $end
$var wire 1 > regInput [4] $end
$var wire 1 ? regInput [3] $end
$var wire 1 @ regInput [2] $end
$var wire 1 A regInput [1] $end
$var wire 1 B regInput [0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bz0000z n!
b0 F"
bx H"
b1 I"
bx J"
bx K"
bx L"
bx M"
bx N"
0#
0$
z,
0+
0*
0)
0(
z'
z&
z%
x4
x3
x2
x1
x0
x/
x.
x-
x8
x7
x6
x5
zB
0A
0@
0?
0>
z=
z<
z;
xJ
xI
xH
xG
xF
xE
xD
xC
xR
xQ
xP
xO
xN
xM
xL
xK
xZ
xY
xX
xW
xV
xU
xT
xS
xb
xa
x`
x_
x^
x]
x\
x[
xf
xe
xd
xc
xj
xi
xh
xg
xk
0l
0m
0n
0o
0p
0q
0r
0s
1t
1u
0v
0w
0x
0y
0z
1$!
0#!
0"!
0!!
0~
0}
0|
0{
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
0/!
1.!
0-!
x2!
x1!
x0!
05!
04!
03!
16!
07!
08!
19!
0:!
0;!
z<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
zD!
xE!
zF!
zm!
0l!
0k!
0j!
0i!
zh!
zg!
zf!
zG!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
0""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x2"
x1"
x0"
x/"
x."
x-"
x,"
0+"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x;"
x<"
x="
x>"
zH!
1:
09
1G"
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0I!
0J!
zY!
zX!
zW!
zp!
zo!
xE"
xD"
xC"
xB"
xA"
x@"
x?"
$end
#10
0"
0:
0t
06!
#50
1!
19
b1 F"
b0z K"
zf
0e
0d
0c
15!
z8
07
06
05
b10 I"
0$!
1#!
1l
1s
0u
09!
1#
1-!
1/!
bx n!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xB
xA
x@
x?
x>
x=
x<
x;
x,
x+
x*
x)
x(
x'
x&
x%
#100
0!
09
#150
1!
19
b10 F"
05!
14!
b100 I"
0#!
1"!
1u
17!
0l
0s
0#
0.!
#200
0!
09
#250
1!
19
bx K"
b11 F"
15!
xf
xe
xd
xc
x8
x7
x6
x5
b1000 I"
0"!
1!!
xu
07!
x#
x-!
x/!
x.!
#300
0!
09
#350
1!
19
b100 F"
05!
04!
13!
b10000 I"
0!!
1~
xB!
xo
x$
x;!
0u
x6!
#400
0!
09
#450
1!
19
b101 F"
15!
b100000 I"
0~
1}
x=!
x>!
x?!
x@!
xA!
xC!
xx
0B!
0o
0$
0;!
0#
0-!
0.!
0/!
b0 n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0B
0A
0@
0?
0>
0=
0<
0;
0,
0+
0*
0)
0(
0'
0&
0%
#500
0!
09
#550
1!
19
b110 F"
05!
14!
b1000000 I"
0}
1|
x$
0=!
0>!
0?!
0@!
0A!
0C!
0x
#600
0!
09
#650
1!
19
b111 F"
15!
b10000000 I"
0|
1{
06!
#700
0!
09
#750
1!
19
b0 F"
05!
04!
03!
b1 I"
1$!
0{
0$
1u
19!
1.!
bz0000z n!
zm!
zh!
zg!
zf!
zB
z=
z<
z;
z,
z'
z&
z%
#800
0!
09
#850
1!
19
b0z K"
b1 F"
15!
zf
0e
0d
0c
z8
07
06
05
b10 I"
0$!
1#!
1l
1s
0u
09!
1#
1-!
1/!
bx n!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xB
xA
x@
x?
x>
x=
x<
x;
x,
x+
x*
x)
x(
x'
x&
x%
#900
0!
09
#950
1!
19
b10 F"
05!
14!
b100 I"
0#!
1"!
1u
17!
0l
0s
0#
0.!
#1000
0!
09
#1050
1!
19
bx K"
b11 F"
15!
xf
xe
xd
xc
x8
x7
x6
x5
b1000 I"
0"!
1!!
xu
07!
x#
x-!
x/!
x.!
#1100
0!
09
